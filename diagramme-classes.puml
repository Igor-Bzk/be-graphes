@startuml

class Graph {
    - mapId: String
    - mapName: String
    - nodes: List<Node>
    - graphStatistics: GraphStatistics

    + Graph(mapId: String, mapName: String, nodes: List<Node>, graphStatistics: GraphStatistics)
    + getGraphInformation(): GraphStatistics
    + get(id: int): Node
    + size(): int
    + getNodes(): List<Node>
    + getMapId(): String
    + getMapName(): String
    + transpose(): Graph
    + toString(): String
}

interface Arc {
    + getOrigin() : Node
    + getDestination() : Node
    + getLength() : float
    + getTravelTime(speed : double) : double
    + getMinimumTravelTime() : double
    + getRoadInformation() : RoadInformation
    + getPoints() : List<Point>
}

class ArcBackward {
    - originalArc : Arc
    
    + ArcBackward(originalArc : Arc)
    + getOrigin() : Node
    + getDestination() : Node
    + getLength() : float
    + getRoadInformation() : RoadInformation
    + getPoints() : List<Point>
}

class ArcForward {
    - origin : Node
    - destination : Node
    - length : float
    - info : RoadInformation
    - points : List<Point>
    
    + ArcForward(origin : Node, destination : Node, length : float, info : RoadInformation, points : List<Point>)
    + getOrigin() : Node
    + getDestination() : Node
    + getLength() : float
    + getRoadInformation() : RoadInformation
    + getPoints() : List<Point>
}

class Node {
    - int id
    - Point point
    - ArrayList<Arc> successors

    + Node(int id, Point point)
    + int getId()
    + int getNumberOfSuccessors()
    + boolean hasSuccessors()
    + List<Arc> getSuccessors()
    + Point getPoint()
    + void addSuccessor(Arc arc)

    + static Arc linkNodes(Node origin, Node destination, float length,
            RoadInformation roadInformation, ArrayList<Point> points)
}

class Path {
    - Graph graph
    - Node origin
    - List<Arc> arcs

    + Path(Graph)
    + Path(Graph, Node)
    + Path(Graph, List<Arc>)
    + Graph getGraph()
    + Node getOrigin()
    + Node getDestination()
    + List<Arc> getArcs()
    + boolean isEmpty()
    + int size()
    + boolean isValid()
    + float getLength()
    + double getTravelTime(double)
    + double getMinimumTravelTime()
    + createFastestPathFromNodes(Graph, List<Node>)
    + createShortestPathFromNodes(Graph, List<Node>)
    + concatenate(Path...)
}

ArcForward .up. Arc
ArcBackward .up. Arc

@enduml