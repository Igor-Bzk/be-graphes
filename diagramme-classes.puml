@startuml

scale 2/3

class Graph {
    - nodes: List<Node>

    + Graph(mapId: String, mapName: String, nodes: List<Node>, graphStatistics: GraphStatistics)
    + getGraphInformation(): GraphStatistics
    + get(id: int): Node
    + size(): int
    + getNodes(): List<Node>
    + getMapId(): String
    + getMapName(): String
    + transpose(): Graph
    + toString(): String
}


class Node {
    - ArrayList<Arc> successors

    + Node(int id, Point point)
    + int getNumberOfSuccessors()
    + boolean hasSuccessors()
    + List<Arc> getSuccessors()
    + void addSuccessor(Arc arc)
    + static Arc linkNodes(Node origin, Node destination, float length,
            RoadInformation roadInformation, ArrayList<Point> points)
}



class RoadInformation{
    - Roadtype type
}


  class Path {
    - Graph graph
    - Node origin
    - List<Arc> arcs

    + Path(Graph)
    + Path(Graph, Node)
    + Path(Graph, List<Arc>)
    + Graph getGraph()
    + Node getOrigin()
    + Node getDestination()
    + List<Arc> getArcs()
    + boolean isEmpty()
    + int size()
}
  interface Arc {
    + getOrigin() : Node
    + getDestination() : Node
    + getLength() : float
}



Graph "1" *-> "*" Node : est composé de
Node "1" o---> "*" Arc : est le début de
Path "1" *-> "1" Node : est composé de
Arc "1" *-> "2" Node : lie
Graph -[hidden]---> Arc
Arc -[hidden]-> Graph
Path "1" *-> "1" Graph : est dans
Path "1" *---> "1..*" Arc : est composé de 
Arc --> RoadInformation : dsqd
@enduml